export global TextboxLogic  {
    pure callback set_currsor(int, string) -> string;
    pure callback str_len(string) -> int;
    pure callback remove_before_currsor(int, string) -> string;
    pure callback remove_after_currsor(int, string) -> string;
    pure callback add_char_currsor(int, string, string) -> string;
}

export component Textbox inherits Rectangle {
    in property <string> title;
    in-out property <string> value;
    in-out property <int> cursor;
    out property <bool> edit-mode;
    out property <string> old-value;

    border-color: #888;
    border-width: 2px;
    border-radius: 3px;
    border-top-right-radius: edit-mode ? 21.25px : 0px;
    border-bottom-right-radius: edit-mode ? 21.25px : 0px;
    animate border-top-right-radius { duration: 0.25s; }
    animate border-bottom-right-radius { duration: 0.25s; }

    Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width / 3;

        border-color: #888;
        border-width: 2px;
        border-radius: 3px;
        border-top-right-radius: 0px;
        border-bottom-right-radius: 0px;

        Text {
            text: root.title;
            color: #888;
        }
    }

    Rectangle {
        x: parent.width / 3;
        width: parent.width - parent.width / 3;

        Rectangle {
            clip: true;
            Text {
                text: TextboxLogic.set_currsor(root.cursor, root.value);
                color: #fff;
            }
        }

        focus := FocusScope {
            key-pressed(event) => {
                if (!edit-mode) {
                    return reject;
                }

                if (event.text == Key.LeftArrow) {
                    cursor = max(0, cursor - 1);

                    return accept;
                }

                if (event.text == Key.RightArrow) {
                    cursor = min(TextboxLogic.str_len(root.value), cursor + 1);

                    return accept;
                }

                if (event.text == Key.Delete) {
                    root.value = TextboxLogic.remove_after_currsor(cursor, root.value);

                    return accept;
                }

                if (event.text == Key.Backspace) {
                    root.value = TextboxLogic.remove_before_currsor(cursor, root.value);
                    cursor = max(0, cursor - 1);

                    return accept;
                }

                root.value = TextboxLogic.add_char_currsor(cursor, root.value, event.text);
                cursor = min(TextboxLogic.str_len(root.value), cursor + 1);

                return accept;
            }
        }

        touch := TouchArea {
            enabled: edit-mode;
            width: parent.width;
            height: parent.height;
            mouse-cursor: text;
            clicked => {
                if (edit-mode) {
                    focus.focus()
                }
            }
        }
    }

    Rectangle {
        x: root.width - root.height + 12.5px;

        width: root.height - 25px;
        height: root.height - 25px;
        border-radius: 100px;
        border-color: confirm-touch.pressed ? #E5C72F :  confirm-touch.has-hover ? #fff : #888;
        border-width: 1px;
        background: edit-mode ? #E5C72F : #888;
        animate border-color { duration: 0.125s; }
        animate background { duration: 0.25s; }

        confirm-touch := TouchArea {
            width: parent.width;
            height: parent.height;
            mouse-cursor: pointer;
            clicked => {
                edit-mode = !edit-mode;

                if (edit-mode) {
                    focus.focus();
                }
            }
        }
    }
}
